    ''' <summary>
    ''' The name of the connection string
    ''' </summary>
    Private Const ConnectionStringName = "IntegrationTests"

    ''' <summary>
    ''' Tests the <see cref="{className}Repository.FindAll" /> method.
    ''' </summary>
    <TestMethod>
    Public Sub FindAll_NoParameters_FindsAllObjects()

        Try

            ' Drop the "{className}" table if it exists already
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

            ' Create the "{className}" table
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.CREATE TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

            ' Create new repository
            Dim repository = New {className}Repository()

            ' Get list of results
            Dim results = repository.FindAll()

            ' Assert that the results is instantiated
            Assert.IsNotNull(results)

            ' Assert that the results contains zero objects
            Assert.AreEqual(0, results.Count)

            ' List of entities generated by the insert method
            Dim insertedEntities = New List(Of {className})()

            ' Determine the amount of records 
            Dim amountOfRecords = Utilities.Random.NextInt32(1, 10)

            ' Insert into the table
            For i = 0 To amountOfRecords - 1
                Dim instance = Initialise{className}()
                insertedEntities.Add(instance)
                InsertRecord(instance)
            Next

            ' Re-select all the data
            results = repository.FindAll()

            ' Assert that the results is instantiated
            Assert.IsNotNull(results)

            ' Assert that the results contains the amount objects that were inserted
            Assert.AreEqual(amountOfRecords, results.Count)

            ' Attempt to find the objects and assert that they are as expected
            For Each result In results

                AssertEqualPropertyValues(insertedEntities.First(Function(r) r.Id = result.Id), result)

            Next

        Finally

            ' Drop the "{className}" table if it still exists
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

        End Try

    End Sub

    ''' <summary>
    ''' Tests the <see cref="{className}Repository.FindById" /> method.
    ''' </summary>
    <TestMethod>
    Public Sub FindById_GivenID_ObjectFound()

        Try

            ' Drop the "{className}" table if it exists already
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

            ' Create the "{className}" table
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.CREATE TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

            ' List of entities generated by the insert method
            Dim insertedEntities = New List(Of {className})()

            ' Determine the amount of records 
            Dim amountOfRecords = Utilities.Random.NextInt32(1, 10)

            ' Insert into the table
            For i = 0 To amountOfRecords - 1

                Dim instance = Initialise{className}()
                insertedEntities.Add(instance)
                InsertRecord(instance)

            Next

            ' Create new repository
            Dim repository = New {className}Repository()

            ' Attempt to find the objects
            For Each insertedEntity In insertedEntities

                Dim retrievedEntity = repository.FindById(insertedEntity.Id)
                Assert.IsNotNull(retrievedEntity)
                AssertEqualPropertyValues(insertedEntity, retrievedEntity)

            Next

        Finally

            ' Drop the "{className}" table if it still exists
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

        End Try

    End Sub

    ''' <summary>
    ''' Tests the <see cref="{className}Repository.Remove" /> method.
    ''' </summary>
    <TestMethod>
    Public Sub Remove_ObjectToRemove_Removed()

        Try

            ' Drop the "{className}" table if it exists already
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

            ' Create the "{className}" table
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.CREATE TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

            ' List of entities generated by the insert method
            Dim insertedEntities = New List(Of {className})()

            ' Determine the amount of records 
            Dim amountOfRecords = Utilities.Random.NextInt32(1, 10)

            ' Insert into the table
            For i = 0 To amountOfRecords - 1

                Dim instance = Initialise{className}()
                insertedEntities.Add(instance)
                InsertRecord(instance)

            Next

            ' Select count from table, it should be equal to amountOfRecords
            Dim count = Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar("SELECT COUNT(1) FROM [{sourceObjectSchema}].[{sourceObjectName}];", ConnectionStringName)
            Assert.AreEqual(amountOfRecords, count)

            ' Create new repository
            Dim repository = New {className}Repository()

            ' Attempt to remove
            Dim removeCount = 0
            For Each insertedEntity In insertedEntities

                removeCount = removeCount + 1
                repository.Remove(insertedEntity)

                ' Select count from table, it should be equal to amountOfRecords
                Dim newCount = Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar("SELECT COUNT(1) FROM [{sourceObjectSchema}].[{sourceObjectName}];", ConnectionStringName)
                Assert.AreEqual(amountOfRecords - removeCount, newCount)

            Next

        Finally

            ' Drop the "{className}" table if it still exists
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

        End Try

    End Sub

    ''' <summary>
    ''' Tests the <see cref="{className}Repository.Save" /> method.
    ''' </summary>
    <TestMethod>
    Public Sub Save_ObjectToSave_Saved()

        Try

            ' Drop the "{className}" table if it exists already
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

            ' Create the "{className}" table
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.CREATE TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

            ' Create a new instance
            Dim instance = Initialise{className}()

            ' Create new repository
            Dim repository = New {className}Repository()

            ' Attempt to insert the instance
            repository.Save(instance)

            ' Select count from table, it should be one
            Dim countAfterInsert = Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar("SELECT COUNT(1) FROM [{sourceObjectSchema}].[{sourceObjectName}];", ConnectionStringName)
            Assert.AreEqual(1, countAfterInsert)

            ' Re-initialise the instance
            Initialise{className}(instance)

            ' Attempt to insert the instance
            repository.Save(instance)

            ' Select count from table, it should still be one
            Dim countAfterUpdate = Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar("SELECT COUNT(1) FROM [{sourceObjectSchema}].[{sourceObjectName}];", ConnectionStringName)
            Assert.AreEqual(1, countAfterUpdate)

        Finally

            ' Drop the "{className}" table if it still exists
            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(Me.GetType().Assembly, String.Format("{0}.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", Me.GetType().Assembly.GetName().Name), ConnectionStringName)

        End Try

    End Sub

    ''' <summary>
    ''' Asserts each of the property values on each of the instances are equal.
    ''' </summary>
    ''' <param name="expected">Instance containing expected property values.</param>
    ''' <param name="actual">Instance containing actual property values.</param>
    Private Sub AssertEqualPropertyValues(expected As {className}, actual As {className})

        If expected Is Nothing Then

            Throw New ArgumentNullException("expected")

        End If

        If actual Is Nothing Then

            Throw New ArgumentNullException("actual")

        End If
{assertEqualPropertyValuesMethodBody}

    End Sub

    ''' <summary>
    ''' Creates a <see cref="{className}"/> with random property values.
    ''' </summary>
    ''' <param name="instance">An instance to initialise.</param>
    ''' <returns>A <see cref="{className}"/>.</returns>
    Public Shared Function Initialise{className}(Optional instance As {className} = Nothing) As {className}

        If instance Is Nothing Then

            instance = New {className} With {.Id = Guid.NewGuid()}

        End If
{initialiseInstanceMethodBody}
        Return instance
    End Function

    ''' <summary>
    ''' Inserts a record into the mapped table
    ''' </summary>
    Private Sub InsertRecord(entity As {className})

        ' NULL-check the entity
        If entity Is Nothing Then

            Throw New ArgumentNullException("entity")

        End If

        Dim sqlcommandBuilder = New Text.StringBuilder()

        sqlcommandBuilder.AppendWithDelimiter("INSERT INTO [{sourceObjectSchema}].[{sourceObjectName}]", vbCrLf)
        sqlcommandBuilder.AppendWithDelimiter("(", vbCrLf)
{insertStatementColumns}
        sqlcommandBuilder.AppendWithDelimiter(")", vbCrLf)
        sqlcommandBuilder.AppendWithDelimiter("VALUES", vbCrLf)
		sqlcommandBuilder.AppendWithDelimiter("(", vbCrLf)
{insertStatementValues}
        sqlcommandBuilder.AppendWithDelimiter(")", vbCrLf)

        Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar(
            sqlcommandBuilder.ToString(),
            ConnectionStringName)

    End Sub
