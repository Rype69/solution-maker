        /// <summary>
        /// The name of the connection string
        /// </summary>
        private const string ConnectionStringName = "IntegrationTests";
		
		/// <summary>
        /// Tests the <see cref="{className}Repository.FindAll" /> method.
        /// </summary>
        [TestMethod]
        public void FindAll_NoParameters_FindsAllObjects()
        {
            try
            {
                // Drop the "{className}" table if it exists already
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);

                // Create the "{className}" table
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.CREATE TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);

                // Create new repository
                var repository = new {className}Repository();

                // Get list of results
                var results = repository.FindAll();

                // Assert that the results is instantiated
                Assert.IsNotNull(results);

                // Assert that the results contains zero objects
                Assert.AreEqual(0, results.Count);

                // List of entities generated by the insert method
                var insertedEntities = new List<{className}>();

                // Determine the amount of records 
                var amountOfRecords = Utilities.Random.NextInt32(1, 10);

                // Insert into the table
                for (var i = 0; i < amountOfRecords; i++)
                {
                    var instance = Initialise{className}();
                    insertedEntities.Add(instance);
                    this.InsertRecord(instance);
                }

                // Re-select all the data
                results = repository.FindAll();

                // Assert that the results is instantiated
                Assert.IsNotNull(results);

                // Assert that the results contains the amount objects that were inserted
                Assert.AreEqual(amountOfRecords, results.Count);

                // Attempt to find the objects and assert that they are as expected
                foreach (var result in results)
                {
                    this.AssertEqualPropertyValues(insertedEntities.First(r => r.Id == result.Id), result);
                }
            }
            finally
            {
                // Drop the "{className}" table if it still exists
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);
            }
        }

        /// <summary>
        /// Tests the <see cref="{className}Repository.FindById" /> method.
        /// </summary>
        [TestMethod]
        public void FindById_GivenID_ObjectFound()
        {
            try
            {
                // Drop the "{className}" table if it exists already
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);

                // Create the "{className}" table
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.CREATE TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);

                // List of entities generated by the insert method
                var insertedEntities = new List<{className}>();

                // Determine the amount of records 
                var amountOfRecords = Utilities.Random.NextInt32(1, 10);

                // Insert into the table
                for (var i = 0; i < amountOfRecords; i++)
                {
                    var instance = Initialise{className}();
                    insertedEntities.Add(instance);
                    this.InsertRecord(instance);
                }

                // Create new repository
                var repository = new {className}Repository();

                // Attempt to find the objects
                foreach (var insertedEntity in insertedEntities)
                {
                    var retrievedEntity = repository.FindById(insertedEntity.Id);
                    Assert.IsNotNull(retrievedEntity);
                    this.AssertEqualPropertyValues(insertedEntity, retrievedEntity);
                }
            }
            finally
            {
                // Drop the "{className}" table if it still exists
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);
            }
        }

        /// <summary>
        /// Tests the <see cref="{className}Repository.Remove" /> method.
        /// </summary>
        [TestMethod]
        public void Remove_ObjectToRemove_Removed()
        {
            try
            {
                // Drop the "{className}" table if it exists already
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);

                // Create the "{className}" table
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.CREATE TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);

                // List of entities generated by the insert method
                var insertedEntities = new List<{className}>();

                // Determine the amount of records 
                var amountOfRecords = Utilities.Random.NextInt32(1, 10);

                // Insert into the table
                for (var i = 0; i < amountOfRecords; i++)
                {
                    var instance = Initialise{className}();
                    insertedEntities.Add(instance);
                    this.InsertRecord(instance);
                }

                // Select count from table, it should be equal to amountOfRecords
                var count = Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar("SELECT COUNT(1) FROM [{sourceObjectSchema}].[{sourceObjectName}];", ConnectionStringName);
                Assert.AreEqual(amountOfRecords, count);

                // Create new repository
                var repository = new {className}Repository();

                // Attempt to remove
                var removeCount = 0;
                foreach (var insertedEntity in insertedEntities)
                {
                    removeCount++;
                    repository.Remove(insertedEntity);

                    // Select count from table, it should be equal to amountOfRecords
                    var newCount = Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar("SELECT COUNT(1) FROM [{sourceObjectSchema}].[{sourceObjectName}];", ConnectionStringName);
                    Assert.AreEqual(amountOfRecords - removeCount, newCount);
                }
            }
            finally
            {
                // Drop the "{className}" table if it still exists
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);
            }
        }

        /// <summary>
        /// Tests the <see cref="{className}Repository.Save" /> method.
        /// </summary>
        [TestMethod]
        public void Save_ObjectToSave_Saved()
        {
            try
            {
                // Drop the "{className}" table if it exists already
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);

                // Create the "{className}" table
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.CREATE TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);

                // Create a new instance
                var instance = Initialise{className}();

                // Create new repository
                var repository = new {className}Repository();

                // Attempt to insert the instance
                repository.Save(instance);

                // Select count from table, it should be one
                var countAfterInsert = Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar("SELECT COUNT(1) FROM [{sourceObjectSchema}].[{sourceObjectName}];", ConnectionStringName);
                Assert.AreEqual(1, countAfterInsert);

                // Re-initialise the instance
                Initialise{className}(instance);

                // Attempt to insert the instance
                repository.Save(instance);

                // Select count from table, it should still be one
                var countAfterUpdate = Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar("SELECT COUNT(1) FROM [{sourceObjectSchema}].[{sourceObjectName}];", ConnectionStringName);
                Assert.AreEqual(1, countAfterUpdate);
            }
            finally
            {
                // Drop the "{className}" table if it still exists
                Utilities.Data.SqlClient.SqlCommand.RunExecuteScalarFromManifestResource(this.GetType().Assembly, $"{this.GetType().Assembly.GetName().Name}.SQL.DROP TABLE [{sourceObjectSchema}].[{sourceObjectName}].sql", ConnectionStringName);
            }
        }

        /// <summary>
        /// Asserts each of the property values on each of the instances are equal.
        /// </summary>
        /// <param name="expected">Instance containing expected property values.</param>
        /// <param name="actual">Instance containing actual property values.</param>
        private void AssertEqualPropertyValues({className} expected, {className} actual)
        {
            if (expected == null)
            {
                throw new ArgumentNullException(nameof(expected));
            }

            if (actual == null)
            {
                throw new ArgumentNullException(nameof(actual));
            }
{assertEqualPropertyValuesMethodBody}
        }

        /// <summary>
        /// Creates a <see cref="{className}"/> with random property values.
        /// </summary>
        /// <param name="instance">An instance to initialise.</param>
        /// <returns>A <see cref="{className}"/>.</returns>
        public static {className} Initialise{className}({className} instance = null)
        {
            if (instance == null)
            {
                instance = new {className} { Id = Guid.NewGuid() };
            }
{initialiseInstanceMethodBody}
            return instance;
        }

        /// <summary>
        /// Inserts a record into the mapped table
        /// </summary>
        private void InsertRecord({className} entity)
        {
            // NULL-check the entity
            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity));
            }

            var sqlcommandBuilder = new System.Text.StringBuilder();

            sqlcommandBuilder.AppendWithDelimiter("INSERT INTO [{sourceObjectSchema}].[{sourceObjectName}]", "\r\n");
            sqlcommandBuilder.AppendWithDelimiter("(", "\r\n");
{insertStatementColumns}
            sqlcommandBuilder.AppendWithDelimiter(")", "\r\n");
            sqlcommandBuilder.AppendWithDelimiter("VALUES", "\r\n");
            sqlcommandBuilder.AppendWithDelimiter("(", "\r\n");
{insertStatementValues}
            sqlcommandBuilder.AppendWithDelimiter(");", "\r\n");

            Utilities.Data.SqlClient.SqlCommand.RunExecuteScalar(
                sqlcommandBuilder.ToString(),
                ConnectionStringName);
        }
